version: "3.0"

config:
  store_entities_as_slots: true

session_config:
  session_expiration_time: 60 # value in minutes
  carry_over_slots_to_new_session: true

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - how_to_get_started
  - thank
  - chitchat_ask_how_were_you_built
  - chitchat_ask_howdoing
  - chitchat_ask_how_old_are_you
  - chitchat_ask_are_you_bot
  - chitchat_ask_ishuman
  - chitchat_ask_weather
  - chitchat_ask_whatismyname
  - chitchat_ask_wherefrom
  - chitchat_ask_whoami
  - chitchat_handleinsult
  - chitchat_nicetomeetyou
  - key_info_competency_unit
  - key_info_references
  - key_info_course_values
  - key_info_project
  - design_faq_software
  - design_faq_soft_properties
  - design_faq_why_design  
  - design_faq_single_solution
  - design_faq_ask_designer_skills
  - design_faq_wicked
  - design_faq_howdesign
  - why_software_architecture
  - ask_software_architecture_definition
  - ask_design_concept
  - ask_design_principle
  - ask_design_pattern
  - ask_design_tactic
  - ask_deployment_pattern
  - ask_quality_attribute
  - ask_quality_attribute_scenario
  - ask_functionality
  - ask_reference_architecture
  - ask_security_tactics
  - ask_usability_tactics

responses:
  utter_greet:
    - text: |
        Hola, mi nombre es Archybotü§ñ.

        Te puedo ayudar a:
        1. Resolver dudas comunes del curso.
        2. Dise√±ar una arquitectura de software.
        
        Si no sabes qu√© hacer, puedes pedirme ayuda escribiendo Ayuda en el chat.
    - text: |
        ¬°Hola, soy Archybotü§ñ!

        Te puedo ayudar a:
        1. Resolver dudas comunes del curso.
        2. Dise√±ar una arquitectura de software.

        Si no sabes qu√© hacer, puedes pedirme ayuda escribiendo Ayuda en el chat.
    - text: |
        ¬°Hola! Mi nombre es Archybotü§ñ.

        Te puedo ayudar a:
        1. Resolver dudas comunes del curso.
        2. Dise√±ar una arquitectura de software.

        Si no sabes qu√© hacer, puedes pedirme ayuda escribiendo Ayuda en el chat.
  utter_goodbye:
    - text: "Adi√≥s :("
  utter_default:
    - text: "Lo siento, no entend√≠ eso ü§∑ ¬øpuedes reformular?"
    - text: No entend√≠ ü§∑ ¬øpodr√≠as reformular eso?
    - text: Lo siento, pero no te entend√≠ ü§∑ ¬øPodr√≠as reformular lo que acaba de decir?
    - text: Me temo que no entend√≠ lo que acabas de decir ü§∑ ¬øPodr√≠as reformular eso?
    - text: No entend√≠ bien eso ü§∑ ¬øpodr√≠as reformular tu mensaje?
    - text: ¬øPodr√≠as reformular su mensaje? No lo entend√≠, lo siento ü§∑    
  utter_get_started:
    - text: |
        Soy un asistente de profesor y te puedo ayudar en los siguientes temas:

        - Fundamentos de arquitectura de software
        - Atributos de calidad
        - Requisitos arquitect√≥nicamente significativos
        - Conceptos de dise√±o arquitect√≥nicos
        - Dise√±o de una arquitectura de software
        - Documentaci√≥n de una arquitectura de software

        ¬øQu√© te interesa?
  utter_why_software_architecture:
    - text: La arquitectura es un puente entre los objetivos de negocio de una organizaci√≥n y el sistema de software final.
  utter_why_software_architecture_fairbanks:
    - text: Es una arma para abordar la complejidad en los sistemas de software. Ayuda a particionar el software, proporciona conocimientos que ayudan a dise√±arlo mejor y proporciona abstracciones que ayudan a razonar sobre el software.    
  utter_ask_software_architecture_definition:
    - text: 
  utter_ask_quality_attribute:
    - text: |
        Un atributo de calidad es una dimensi√≥n de calidad utilizada para evaluar un sistema de software. Es una propiedad medible 
        o comprobable de un sistema que se utiliza para indicar qu√© tan bien el sistema satisface las necesidades de los interesados 
        m√°s all√° de la funci√≥n b√°sica del sistema.

        La forma m√°s simple de clasificarlos es entre aquellos que describen alguna propiedad del sistema en tiempo de ejecuci√≥n 
        (ej. disponibilidad) y aquellos que describen alguna propiedad en tiempo de desarrollo del sistema como modificabilidad (ej. modificabilidad).
  utter_quality_attribute_list:
    - text: |
        Existe una gran variedad. Los m√°s se repiten en la pr√°ctica son: 
        - Disponibilidad (Availability)
        - Eficiencia energ√©tica (Energy Efficiency)
        - Facilidad de despliegue (Deployability)        
        - Facilidad de integraci√≥n (Integrability)
        - Facilidad de prueba (Testability)
        - Interoperabilidad (Interoperabilidad)
        - Modificabilidad (Modifiability)
        - Protecci√≥n (Safety)
        - Rendimiento (Performance)
        - Seguridad (Security)
        - Usabilidad (Usability)
  utter_functionality:
    - text: |
        Se puede definir Funcionalidad como la capacidad del sistema de realizar el trabajo para el que fue dise√±ado. 
        La funcionalidad no determina la arquitectura de un sistema de software. Revisa tus requisitos de calidad y 
        restricciones para eso.
  utter_design_concept:
    - text: |
        Los Conceptos de Dise√±o son realizaciones reutilizables de los enfoques (abstractos) de dise√±o que se utilizan como bloques 
        de construcci√≥n de las estructuras que component a las arquitecturas. Ejemplos de conceptos de dise√±o son:
        - Arquitectuas de referencia
        - Patrones de dise√±o arquitect√≥nico
        - Patrones de despliegue
        - T√°cticas
        - Componentes desarrollados externamente
  utter_deployment_pattern:
    - text: "Son un modelo sobre como estructurar f√≠sicamente un sistema para su despliegue. Son importantes para definir una estructura f√≠sica inicial del sistema en t√©rminos de niveles (nodos f√≠sicos) para satisfacer ciertos atributos de calidad."
  utter_design_principle:
    - text: "Para lograr una alta modoficabilidad debe de existir una buena modularidad, es decir, alta cohesi√≥n y bajo acoplamiento."
    - text: "Para alcanzar una alta disponibilidad hay que evitar tener un √∫nico punto de falla."
    - text: "Para alcanzar seguridad se pueden limitar los puntos de acceso a recursos cr√≠ticos."
    - text: "Para tener una buena facilidad de prueba se debe externalizar el estado del sistema de software." 
  utter_quality_attribute_scenario:
    - text: |
        Un escenario de atributo de calidad describen la respuesta del sistema a alg√∫n est√≠mulo y se utilizan para describir un requisito de atributo de calidad. 
        Los escenarios son hip√≥tesis comprobables sobre el comportamiento de los atributos de calidad del sistema.
        Su definici√≥n consta de seis partes:

        1. Est√≠mulo: Un evento que recibe el sistema.
        2. Fuente del est√≠mulo: Entidad que genera el est√≠mulo (humano, sistema de c√≥mputo, actuador, etc.).
        3. Ambiente: Condiciones en las que ocurre el est√≠mulo. 
        4. Artfacto: Parte o todo el sistema que recibe el est√≠mulo.
        5. Respuesta: La actividad que se realiza tras la llegada de un est√≠mulo.
        6. Medida de respuesta: Forma en la que se mide la respuesta para probar que el requisito se ha satisfecho.

        Recuerdo que para satisfacer los requisitos de calidad que se describen en los escenarios se utilizan patrones y t√°cticas.
  utter_design_pattern:
    - text: |
        Un patr√≥n arquitect√≥nico describe un problema de dise√±o recurrente que surge en un contexto en particular y nos presenta una soluci√≥n probada por la experiencia. 
        
        En la soluci√≥n que proporciona el patr√≥n se definen elementos, sus responsabilidades y relaciones, adem√°s de la manera en la que √©stos colaboran.

        Los patrones arquitect√≥nicos tienen una gran influencia en los atributos de calidad ya que comprenden m√∫ltiples decisiones y t√°cticas de dise√±o.
  utter_design_tactic:
    - text: |
        Las T√°cticas de Dise√±o son primitivas de dise√±o fundamentales que el arquitecto utilizan para influir en la respuesta 
        del sistema en un atributo de calidad. Estas t√©cnicas de dise√±o fundamentales se han descubierto y utilizado durante 
        a√±os para que el sistema que se est√© dise√±ando tenga las caracter√≠sticas deseadas.
  utter_explain_reference_architecture:
    - text: Son modelos que proporcionan una estructura l√≥gica general para un tipo particular de aplicaci√≥n o dominio. Se mapean a uno o m√°s patrones arquitect√≥nicos. Se han probado en contextos t√©cnicos y de negocio. Suelen venir con un conjunto de artefactos de apoyo que facilitan su uso.
  utter_security_tactics:
    - text: "Detectar ataques, Resistir ataques, Reaccionar a ataques y Recuperarse de ataques"
  utter_usability_tactics:
    - text: "Dar soporte a la iniciativa del usuario y Dar soporte a la iniciativa el sistema"
